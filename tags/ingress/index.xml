<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ingress on From 0.985mhz... to several Ghz</title>
    <link>https://blog.andreasm.io/tags/ingress/</link>
    <description>Recent content in ingress on From 0.985mhz... to several Ghz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Myself</copyright>
    <lastBuildDate>Tue, 26 Dec 2023 20:31:45 +0100</lastBuildDate><atom:link href="https://blog.andreasm.io/tags/ingress/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Traefik Proxy in Kubernetes</title>
      <link>https://blog.andreasm.io/2023/12/26/traefik-proxy-in-kubernetes/</link>
      <pubDate>Tue, 26 Dec 2023 20:31:45 +0100</pubDate>
      
      <guid>https://blog.andreasm.io/2023/12/26/traefik-proxy-in-kubernetes/</guid>
      <description>
        
          
            In this post I will go through how I have configured and run Traefik in my Kubernetes lab.
          
          
        
      </description>
    </item>
    
    <item>
      <title>vSphere 8 with Tanzu using VDS and Avi Loadbalancer</title>
      <link>https://blog.andreasm.io/2022/10/26/vsphere-8-with-tanzu-using-vds-and-avi-loadbalancer/</link>
      <pubDate>Wed, 26 Oct 2022 12:06:08 +0200</pubDate>
      
      <guid>https://blog.andreasm.io/2022/10/26/vsphere-8-with-tanzu-using-vds-and-avi-loadbalancer/</guid>
      <description>
        
          
            Deploy Tanzu in vSphere 8 with VDS and Avi Loadbalancer: This post will go through how to install Tanzu in vSphere 8 using vSphere VDS networking and Avi as loadbalancer. The goal is to deploy Tanzu by using vSphere Distributed Switch (no NSX this time) and utilize Avi as loadbalancer for Supervisor and workload cluster L4 endpoint (kubernetes API). When that is done I will go through how we also can extend this into L7 (Ingress) by using AKO in our workload clusters.
          
          
        
      </description>
    </item>
    
    <item>
      <title>vSphere 8 with Tanzu using NSX-T &amp; Avi LoadBalancer</title>
      <link>https://blog.andreasm.io/2022/10/26/vsphere-8-with-tanzu-using-nsx-t-avi-loadbalancer/</link>
      <pubDate>Wed, 26 Oct 2022 12:03:35 +0200</pubDate>
      
      <guid>https://blog.andreasm.io/2022/10/26/vsphere-8-with-tanzu-using-nsx-t-avi-loadbalancer/</guid>
      <description>
        
          
            Deploy Tanzu in vSphere 8 with NSX and Avi Loadbalancer: This post will go through how to install Tanzu in vSphere 8 using NSX networking (including built in L4 loadbalancer) and Avi as L7 loadbalancer. The goal is to deploy Tanzu by using NSX for all networking needs, including the Kubernetes Api endpoint (L4) and utilize Avi as loadbalancer for all L7 (Ingress). The deployment of Tanzu with NSX is an automated process, but it does not include L7 loadbalancing.
          
          
        
      </description>
    </item>
    
    <item>
      <title>AKO Explained</title>
      <link>https://blog.andreasm.io/2022/10/26/ako-explained/</link>
      <pubDate>Wed, 26 Oct 2022 12:02:39 +0200</pubDate>
      
      <guid>https://blog.andreasm.io/2022/10/26/ako-explained/</guid>
      <description>
        
          
            What is AKO? AKO is an operator which works as an ingress controller and performs Avi-specific functions in an OpenShift/Kubernetes environment with the Avi Controller. It runs as a pod in the cluster and translates the required OpenShift/Kubernetes objects to Avi objects and automates the implementation of ingresses/routes/services on the Service Engines (SE) via the Avi Controller. ref: link
How to install AKO AKO is very easy installed with Helm. Four basic steps needs to be done.
          
          
        
      </description>
    </item>
    
    <item>
      <title>K8s Ingress with NSX Advanced Load Balancer</title>
      <link>https://blog.andreasm.io/2021/07/11/k8s-ingress-with-nsx-advanced-load-balancer/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.andreasm.io/2021/07/11/k8s-ingress-with-nsx-advanced-load-balancer/</guid>
      <description>
        
          
            Abbreviations used in this article:
NSX Advanced Load Balancer = NSX-ALB K8s = Kubernetes (8 letters between the K and s in Kubernetes) SSL = Secure Sockets Layer AKO = Avi Kubernetes Operator (AVI now a VMware product called NSX Advanced Load Balancer) In one of my previous posts I wrote about how to install and configure AKO (Avi Kubernetes Operator) to use as Service type LoadBalancer.
This post will try to cover the basics of how to use NSX Advanced LoadBalancer by using AKO to handle our Ingress requests (ingress-controller).
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
