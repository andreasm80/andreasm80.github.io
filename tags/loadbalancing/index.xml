<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>loadbalancing on From 0.985mhz... to several Ghz</title>
    <link>https://blog.andreasm.io/tags/loadbalancing/</link>
    <description>Recent content in loadbalancing on From 0.985mhz... to several Ghz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Myself</copyright>
    <lastBuildDate>Mon, 08 Apr 2024 14:56:56 +0200</lastBuildDate><atom:link href="https://blog.andreasm.io/tags/loadbalancing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>vSphere with Tanzu - Avi and Multiple Supervisors</title>
      <link>https://blog.andreasm.io/2024/04/08/vsphere-with-tanzu-avi-and-multiple-supervisors/</link>
      <pubDate>Mon, 08 Apr 2024 14:56:56 +0200</pubDate>
      
      <guid>https://blog.andreasm.io/2024/04/08/vsphere-with-tanzu-avi-and-multiple-supervisors/</guid>
      <description>
        
          
            In this post I will try to describe how to use the new NSX and Avi together integration in vSphere with Tanzu in combination with several Supervisor clusters using only 1 NSX manager cluster and 1 Avi controller cluster
          
          
        
      </description>
    </item>
    
    <item>
      <title>Traefik Proxy in Kubernetes</title>
      <link>https://blog.andreasm.io/2023/12/26/traefik-proxy-in-kubernetes/</link>
      <pubDate>Tue, 26 Dec 2023 20:31:45 +0100</pubDate>
      
      <guid>https://blog.andreasm.io/2023/12/26/traefik-proxy-in-kubernetes/</guid>
      <description>
        
          
            In this post I will go through how I have configured and run Traefik in my Kubernetes lab.
          
          
        
      </description>
    </item>
    
    <item>
      <title>TKGi with NSX and NSX Advanced LoadBalancer</title>
      <link>https://blog.andreasm.io/2023/11/23/tkgi-with-nsx-and-nsx-advanced-loadbalancer/</link>
      <pubDate>Thu, 23 Nov 2023 08:17:49 +0100</pubDate>
      
      <guid>https://blog.andreasm.io/2023/11/23/tkgi-with-nsx-and-nsx-advanced-loadbalancer/</guid>
      <description>
        
          
            In this post I will go through installation of TKGi, using the EPMC installer, then how to configure TKGi to use NSX Advanced LoadBalancer
          
          
        
      </description>
    </item>
    
    <item>
      <title>vSphere with Tanzu 8 U2 using NSX AND NSX Advanced Loadbalancer</title>
      <link>https://blog.andreasm.io/2023/09/23/vsphere-with-tanzu-8-u2-using-nsx-and-nsx-advanced-loadbalancer/</link>
      <pubDate>Sat, 23 Sep 2023 21:35:17 +0200</pubDate>
      
      <guid>https://blog.andreasm.io/2023/09/23/vsphere-with-tanzu-8-u2-using-nsx-and-nsx-advanced-loadbalancer/</guid>
      <description>
        
          
            A quick test on the new feature in vSphere 8 U2 with Tanzu using NSX and NSX Advanced Loadbalancer for Kubernetes API endpoint
          
          
        
      </description>
    </item>
    
    <item>
      <title>vSphere 8 with Tanzu using VDS and Avi Loadbalancer</title>
      <link>https://blog.andreasm.io/2022/10/26/vsphere-8-with-tanzu-using-vds-and-avi-loadbalancer/</link>
      <pubDate>Wed, 26 Oct 2022 12:06:08 +0200</pubDate>
      
      <guid>https://blog.andreasm.io/2022/10/26/vsphere-8-with-tanzu-using-vds-and-avi-loadbalancer/</guid>
      <description>
        
          
            Deploy Tanzu in vSphere 8 with VDS and Avi Loadbalancer: This post will go through how to install Tanzu in vSphere 8 using vSphere VDS networking and Avi as loadbalancer. The goal is to deploy Tanzu by using vSphere Distributed Switch (no NSX this time) and utilize Avi as loadbalancer for Supervisor and workload cluster L4 endpoint (kubernetes API). When that is done I will go through how we also can extend this into L7 (Ingress) by using AKO in our workload clusters.
          
          
        
      </description>
    </item>
    
    <item>
      <title>AKO Explained</title>
      <link>https://blog.andreasm.io/2022/10/26/ako-explained/</link>
      <pubDate>Wed, 26 Oct 2022 12:02:39 +0200</pubDate>
      
      <guid>https://blog.andreasm.io/2022/10/26/ako-explained/</guid>
      <description>
        
          
            What is AKO? AKO is an operator which works as an ingress controller and performs Avi-specific functions in an OpenShift/Kubernetes environment with the Avi Controller. It runs as a pod in the cluster and translates the required OpenShift/Kubernetes objects to Avi objects and automates the implementation of ingresses/routes/services on the Service Engines (SE) via the Avi Controller. ref: link
How to install AKO AKO is very easy installed with Helm. Four basic steps needs to be done.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Configure NSX Advanced Load Balancer (NSX-ALB) as DNS provider</title>
      <link>https://blog.andreasm.io/2021/07/12/configure-nsx-advanced-load-balancer-nsx-alb-as-dns-provider/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.andreasm.io/2021/07/12/configure-nsx-advanced-load-balancer-nsx-alb-as-dns-provider/</guid>
      <description>
        
          
            NSX ALB has a very useful feature built-in, to function as DNS server for your domains defined in your NSX-ALB environment. Meaning that all host-records will be automatically resolved by fqdn as soon as the service is created.
If you have followed my other post about how to configure the AKO (Avi Kubernetes Operator) http://yikes.guzware.net/2020/10/08/ako-with-antrea-on-native-k8s-cluster/ you are familiar with creating DNS profiles in NSX-ALB. The first step in configuring NSX-ALB as DNS provider is to configure one or more domain names in NSX-ALB.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
